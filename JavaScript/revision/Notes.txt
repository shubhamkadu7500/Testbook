Javascript
*************************************************************
What is JavaScript?
ans - a powerful, flexible, and fast programming language.
    powers the dynamic behavior on websites,  remains at the core of web development.
    used mainly for enhancing the interaction of a user with the webpage.
    web pages can be made live and interactive.

by using getElementById()  Methods we can accessed that element and we can
change it and designe by that is must  be unique in nature

eg : <p id="p11"></p>
    document.getElementById('p11').innerHTML = "Deeraj Kadu";
    document.getElementById('p11').style.color = 'red';


*************************************************************8


Javascript Variable : 
variavle can store the value and its type is var, let and const, javascript is untype language.
type of variable : 
globle - it can define anywhere in js file
var fruit ="mango";
document.getElementById('f1').innerHTML = fruit;

local - it can define only in function 
function hello(){
    var gretting = "welcome"
    console.log(gretting);
    var gretting = "shubham";
    console.log(gretting);
}
// var gretting = "shubham"; here we cannot redefine it
hello();

****Litrals : - 
here we can used `${}` for formating string
ex : document.getElementById('litral').innerHTML = `the given fruirt is ${fruit}`;


*************************************************************


 operators : 
is a symbol reserved for performing a special task, can be variables,
string or numeric literals.
types of operators : 
● Arithmetic Operators
● Relational Operators
● Bitwise Operators
● Logical Operators
● Assignment Operators
● Ternary Operators
● TypeOf Operator

********************************************************

 
Comment Statement : 
easy understanding of the code, used to disable a part of code from being executed.
comments will be ignored by the JavaScript engine
type of comment : 
single line and double line 
// this is sinle line comment 
or 
/* this is double line comment */


************************************************************

JavaScript Identifiers : 
names given to variables, functions, parameters, classNameNameNameNamees, etc. are called Identifiers.
○ Names can begin with a letter (a to z or A to Z).
○ Names can also begin with (_) or ($).
○ Variable names should not start with digits(0-9).
○ Variable names are case-sensitive (a and A are different variables).
○ Variable names can have letters, digits(0-9), underscore(_) or dollar($).
○ JavaScript keywords cannot be used as variable names.

ex : var _fruit = apple;

**************************************************************

JavaScript Data Types: 
dynamic type language because the JS engine chooses the data type itself dynamically.
variables can hold different data types.
type of data type : 
Primitive Data Type - string, number, boolean, null  and undefine
Non - Primitive Data Type - object, array and RegExp 

**************************************************************

variable's in javascript:
variable is data storing containers, values may variy and having unique name of variable
types var, let, const are used to create variable
javascript is untyped language

let :- you can not re declare this it gives error (it is block level variable)
eg - let x  = 10;  let x = 20;
it gives syntax error redeclare is not possible

let and const can not acces outside block block scope, Redeclaring Variables globally and local simultaneously with let 
keyword won’t impose a problem
let x = 10;
here x = 10
{
    let x = 20;
    here x = 20
}
here x = 10

var : - We can Redeclare variables with the var keyword. var keyword don’t have block scope, accessed outside the block.
 var x = 20;
 {
    var x = 30;
 }
 x is 30 here

 const : - We cannot Redeclare the variables defined with const keyword, we can redeclare the const keyword variables in another block
 const x = 10;
 {
    const x = 20;
 }
 but here we cannot redeclare x here it gives error 
**************************************************************************************

Operator : -
it is a symbol reserved for performing a specific task, 
Types of Operators
● Arithmetic Operators
● Comparison (Relational) Operators
● Bitwise Operators
● Logical Operators
● Assignment Operators
● Miscellaneous Operator
○ Conditional (or) Ternary Operator
○ TypeOf Operator
● String Operators

1 Arithmetic Operator : + addition, - substraction, * multiplication, / division, ** Exponentiation(2**2=4), -- decrement, ++ increment, % modules
2 Comparison : == Is equal to, === Identical (equal & of same type), != Not equal to, !== Not Identical, > Greater than, >= Greater than or equal to, < less than, <= less than or equal to
3 Bitwise Operators : 
4 Logical Operators : && and,|| or, ! reverse
5 Assignment Operators : = Assign, += Add and assign, -= Subtract and assign, *= Multiply and assign, /= Divide and assign, %= Modulus and assign

Conditional or Ternary Operator : 
var num1 = 10;
var num2 = 20;
var result = (num1 > num2) ? 100 : 200;
*****************************************************************************************************

consitions : -  
Types of Conditional Statement
○ if
○ else
○ else if
○ Switch Statement

“If” : -  Statement is used when a specific block of code is to be executed, If a condition is
true  
eg :- if(condition){ //execute this code }

“Else” Statement : - 
● If the condition is true, then the code inside the if block will be executed.
● If the condition is false, then the code inside the else block will be executed.
eg: -
if(condition){
    //execute this code condition is true
}else{
    // execute this code condition is fulse
}

Else If Statement : -
if(condiotn){
    //execute if condition is true
}else if(condition){
    //execute this when condition is true
}else{
    //execute this if condition is fulse
}


Switch Statement : - 
Switch(condition){
    case x:
        //execute this 
        breake;
    case y: 
        //execute this 
        breake;
    defaulte:
        //execute this
};

Loops : - 
Types of Loops
○ for
○ for/in
○ for/of
○ while
○ do/while

Entry Controlled Loop: The Condition is tested before the entry of the Loop body.
Eg: For Loop and While Loop.
Exit Controlled Loop: The Condition is tested at the end of the Loop body. In this case the
loop will be executed at least once irrespective of the condition.
Eg: Do While Loop.

The For Loop : 
for(initialization, condition, increment){
    //code be executed
}

● while loop.
● do/while loop.
while loop: -
let text = "";
let i = 0;
while(i < 10){
    text +="<br>The Number us "+ 1;
    i++;
}
document.getElementById('demo').innerHTML = text;

Nested Lopp : 
loop run inside another loop
outerloop{
    innerloop{
        //code here
    }
    //code here
}

it is used to print visualize table, matrix, pattern, multidimentional array.

